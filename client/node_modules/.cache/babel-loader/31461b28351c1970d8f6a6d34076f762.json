{"ast":null,"code":"import _objectSpread from\"/home/kushal/tip-saza/client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _toConsumableArray from\"/home/kushal/tip-saza/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import*as type from\"../types/categoryType\";var categoryReducer=function categoryReducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case type.CREATE_CATEGORY:return[action.payload].concat(_toConsumableArray(state));case type.GET_CATEGORIES:return action.payload;case type.UPDATE_CATEGORY:return state.map(function(item){return item._id===action.payload._id?_objectSpread(_objectSpread({},item),{},{name:action.payload.name}):item;});case type.DELETE_CATEGORY:return state.filter(function(item){return item._id!==action.payload;});default:return state;}};export default categoryReducer;","map":{"version":3,"sources":["/home/kushal/tip-saza/client/src/redux/reducers/categoryReducer.ts"],"names":["type","categoryReducer","state","action","CREATE_CATEGORY","payload","GET_CATEGORIES","UPDATE_CATEGORY","map","item","_id","name","DELETE_CATEGORY","filter"],"mappings":"qOAAA,MAAO,GAAKA,CAAAA,IAAZ,KAAsB,uBAAtB,CAIA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,EAAyE,IAAvEC,CAAAA,KAAuE,2DAAlD,EAAkD,IAA9CC,CAAAA,MAA8C,2CAC7F,OAAQA,MAAM,CAACH,IAAf,EACI,IAAKA,CAAAA,IAAI,CAACI,eAAV,CACI,OAAQD,MAAM,CAACE,OAAf,4BAA2BH,KAA3B,GAEJ,IAAKF,CAAAA,IAAI,CAACM,cAAV,CACI,MAAOH,CAAAA,MAAM,CAACE,OAAd,CAEJ,IAAKL,CAAAA,IAAI,CAACO,eAAV,CACI,MAAOL,CAAAA,KAAK,CAACM,GAAN,CAAU,SAACC,IAAD,QACbA,CAAAA,IAAI,CAACC,GAAL,GAAaP,MAAM,CAACE,OAAP,CAAeK,GAA5B,gCACMD,IADN,MACYE,IAAI,CAAER,MAAM,CAACE,OAAP,CAAeM,IADjC,GAEEF,IAHW,EAAV,CAAP,CAMJ,IAAKT,CAAAA,IAAI,CAACY,eAAV,CACI,MAAOV,CAAAA,KAAK,CAACW,MAAN,CAAa,SAAAJ,IAAI,QAAIA,CAAAA,IAAI,CAACC,GAAL,GAAaP,MAAM,CAACE,OAAxB,EAAjB,CAAP,CAEJ,QACG,MAAOH,CAAAA,KAAP,CAlBP,CAoBH,CArBD,CAuBA,cAAeD,CAAAA,eAAf","sourcesContent":["import * as type from \"../types/categoryType\"\nimport { ICategory } from \"../../utils/TypeScript\"\n\n\nconst categoryReducer = ( state: ICategory[] = [], action: type.ICategoryType ) : ICategory[] => {\n    switch (action.type) {\n        case type.CREATE_CATEGORY:\n            return [action.payload, ...state]\n\n        case type.GET_CATEGORIES:\n            return action.payload\n        \n        case type.UPDATE_CATEGORY:\n            return state.map((item) => (\n                item._id === action.payload._id\n                ? {...item, name: action.payload.name}\n                : item\n            ))\n        \n        case type.DELETE_CATEGORY:\n            return state.filter(item => item._id !== action.payload)\n\n        default:\n           return state;\n    }\n}\n\nexport default categoryReducer;"]},"metadata":{},"sourceType":"module"}