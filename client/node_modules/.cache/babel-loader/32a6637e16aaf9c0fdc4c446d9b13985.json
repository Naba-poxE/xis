{"ast":null,"code":"import _regeneratorRuntime from\"/home/kushal/tip-saza/client/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/kushal/tip-saza/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";export var checkImage=function checkImage(file){var types=['image/png','image/jpeg'];var err='';if(!file)return err='File does not exist!';if(file.size>2048*2048)return err='Too large file!';if(!types.includes(file.type))return err='Image format is invalid!';return err;};export var imageUpload=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(file){var formData,res,data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:formData=new FormData();formData.append('file',file);formData.append('upload_preset','b20m1fqi');formData.append('cloud_name','dpra6ghs3');_context.next=6;return fetch('https://api.cloudinary.com/v1_1/dpra6ghs3/upload',{method:'POST',body:formData});case 6:res=_context.sent;_context.next=9;return res.json();case 9:data=_context.sent;return _context.abrupt(\"return\",{public_id:data.public_id,url:data.secure_url});case 11:case\"end\":return _context.stop();}}},_callee);}));return function imageUpload(_x){return _ref.apply(this,arguments);};}();","map":{"version":3,"sources":["/home/kushal/tip-saza/client/src/utils/ImageUpload.ts"],"names":["checkImage","file","types","err","size","includes","type","imageUpload","formData","FormData","append","fetch","method","body","res","json","data","public_id","url","secure_url"],"mappings":"2NAAA,MAAO,IAAMA,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,IAAD,CAAgB,CACtC,GAAMC,CAAAA,KAAK,CAAG,CAAC,WAAD,CAAc,YAAd,CAAd,CAEA,GAAIC,CAAAA,GAAG,CAAG,EAAV,CAEA,GAAG,CAACF,IAAJ,CAAU,MAAOE,CAAAA,GAAG,CAAG,sBAAb,CAEV,GAAGF,IAAI,CAACG,IAAL,CAAY,KAAO,IAAtB,CAA4B,MAAOD,CAAAA,GAAG,CAAG,iBAAb,CAE5B,GAAG,CAACD,KAAK,CAACG,QAAN,CAAeJ,IAAI,CAACK,IAApB,CAAJ,CAA+B,MAAOH,CAAAA,GAAG,CAAG,0BAAb,CAE/B,MAAOA,CAAAA,GAAP,CACH,CAZM,CAeP,MAAO,IAAMI,CAAAA,WAAW,0FAAG,iBAAON,IAAP,wIACjBO,QADiB,CACN,GAAIC,CAAAA,QAAJ,EADM,CAEvBD,QAAQ,CAACE,MAAT,CAAgB,MAAhB,CAAuBT,IAAvB,EACAO,QAAQ,CAACE,MAAT,CAAgB,eAAhB,CAAgC,UAAhC,EACAF,QAAQ,CAACE,MAAT,CAAgB,YAAhB,CAA6B,WAA7B,EAJuB,sBAMLC,CAAAA,KAAK,CAAC,kDAAD,CAAoD,CACvEC,MAAM,CAAE,MAD+D,CAEvEC,IAAI,CAAEL,QAFiE,CAApD,CANA,QAMjBM,GANiB,qCAWJA,CAAAA,GAAG,CAACC,IAAJ,EAXI,QAWjBC,IAXiB,+CAYhB,CAAEC,SAAS,CAAED,IAAI,CAACC,SAAlB,CAA6BC,GAAG,CAAEF,IAAI,CAACG,UAAvC,CAZgB,yDAAH,kBAAXZ,CAAAA,WAAW,4CAAjB","sourcesContent":["export const checkImage = (file: File) => {\n    const types = ['image/png', 'image/jpeg'] \n\n    let err = '';\n\n    if(!file) return err = 'File does not exist!'\n\n    if(file.size > 2048 * 2048) return err = 'Too large file!'\n\n    if(!types.includes(file.type)) return err = 'Image format is invalid!'\n        \n    return err;\n}\n\n\nexport const imageUpload = async (file: File) => {\n    const formData = new FormData()\n    formData.append('file',file)\n    formData.append('upload_preset','b20m1fqi')\n    formData.append('cloud_name','dpra6ghs3')\n\n    const res = await fetch('https://api.cloudinary.com/v1_1/dpra6ghs3/upload',{\n        method: 'POST',\n        body: formData\n    })\n\n    const data = await res.json()\n    return { public_id: data.public_id, url: data.secure_url};\n}\n"]},"metadata":{},"sourceType":"module"}