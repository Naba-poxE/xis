{"ast":null,"code":"import _regeneratorRuntime from\"/home/kushal/tip-saza/client/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/kushal/tip-saza/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import jwt_decode from\"jwt-decode\";import{AUTH}from\"../redux/types/authType\";import{getAPI}from\"./FetchDatas\";export var checkTokenExp=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(token,dispatch){var decoded,res;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:decoded=jwt_decode(token);if(!(decoded.exp>=Date.now()/1000)){_context.next=3;break;}return _context.abrupt(\"return\");case 3:_context.next=5;return getAPI('refresh_token');case 5:res=_context.sent;dispatch({type:AUTH,payload:res.data});return _context.abrupt(\"return\",res.data.access_token);case 8:case\"end\":return _context.stop();}}},_callee);}));return function checkTokenExp(_x,_x2){return _ref.apply(this,arguments);};}();","map":{"version":3,"sources":["/home/kushal/tip-saza/client/src/utils/checkTokenExp.ts"],"names":["jwt_decode","AUTH","getAPI","checkTokenExp","token","dispatch","decoded","exp","Date","now","res","type","payload","data","access_token"],"mappings":"2NAAA,MAAOA,CAAAA,UAAP,KAAuB,YAAvB,CACA,OAASC,IAAT,KAAqB,yBAArB,CACA,OAASC,MAAT,KAAuB,cAAvB,CAQA,MAAO,IAAMC,CAAAA,aAAa,0FAAG,iBAAMC,KAAN,CAAqBC,QAArB,kIACnBC,OADmB,CACDN,UAAU,CAACI,KAAD,CADT,MAGtBE,OAAO,CAACC,GAAR,EAAeC,IAAI,CAACC,GAAL,GAAa,IAHN,wFAKPP,CAAAA,MAAM,CAAC,eAAD,CALC,QAKnBQ,GALmB,eAMzBL,QAAQ,CAAC,CAAEM,IAAI,CAAEV,IAAR,CAAcW,OAAO,CAAEF,GAAG,CAACG,IAA3B,CAAD,CAAR,CANyB,gCAOlBH,GAAG,CAACG,IAAJ,CAASC,YAPS,wDAAH,kBAAbX,CAAAA,aAAa,gDAAnB","sourcesContent":["import jwt_decode from \"jwt-decode\";\nimport { AUTH } from \"../redux/types/authType\";\nimport { getAPI } from \"./FetchDatas\";\n\ninterface IToken {\n    exp: number\n    iat: number\n    id: string\n}\n\nexport const checkTokenExp = async(token: string, dispatch: any) => {\n    const decoded: IToken = jwt_decode(token)\n\n    if(decoded.exp >= Date.now() / 1000) return;\n\n    const res = await getAPI('refresh_token')\n    dispatch({ type: AUTH, payload: res.data })\n    return res.data.access_token;\n}"]},"metadata":{},"sourceType":"module"}